from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TopAbs import *
from OCC.Core.TopoDS import *
from OCC.Core.TCollection import *
from OCC.Core.GeomAbs import *
from OCC.Core.gp import *
from OCC.Core.Geom2dHatch import *


class DBRep_ListOfEdge:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class DBRep_ListOfFace:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class DBRep_ListOfHideData:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> DBRep_HideData: ...
    def Last(self) -> DBRep_HideData: ...
    def Append(self, theItem: DBRep_HideData) -> DBRep_HideData: ...
    def Prepend(self, theItem: DBRep_HideData) -> DBRep_HideData: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> DBRep_HideData: ...
    def SetValue(self, theIndex: int, theValue: DBRep_HideData) -> None: ...

class dbrep:
    @staticmethod
    def Discretisation() -> int: ...
    @overload
    @staticmethod
    def Get(theName: str, theType: Optional[TopAbs_ShapeEnum] = TopAbs_SHAPE, theToComplain: Optional[bool] = False) -> TopoDS_Shape: ...
    @overload
    @staticmethod
    def Get(theName: str, theType: Optional[TopAbs_ShapeEnum] = TopAbs_SHAPE, theToComplain: Optional[bool] = False) -> TopoDS_Shape: ...
    @staticmethod
    def GetExisting(theName: str, theType: Optional[TopAbs_ShapeEnum] = TopAbs_SHAPE, theToComplain: Optional[bool] = False) -> TopoDS_Shape: ...
    @staticmethod
    def HLRAngle() -> float: ...
    @staticmethod
    def HLRMode() -> bool: ...
    @staticmethod
    def HidMode() -> bool: ...
    @staticmethod
    def NbIsos() -> int: ...
    @staticmethod
    def Parameters() -> DBRep_Params: ...
    @staticmethod
    def Rg1Mode() -> bool: ...
    @staticmethod
    def RgNMode() -> bool: ...
    @staticmethod
    def Set(Name: str, S: TopoDS_Shape) -> None: ...

class DBRep_DrawableShape(Draw_Drawable3D):
    def ChangeDiscret(self, Discret: int) -> None: ...
    def ChangeNbIsos(self, NbIsos: int) -> None: ...
    def Copy(self) -> False: ...
    def Discret(self) -> int: ...
    def DisplayHLR(self, withHLR: bool, withRg1: bool, withRgN: bool, withHid: bool, ang: float) -> None: ...
    def DisplayOrientation(self, D: bool) -> None: ...
    @overload
    def DisplayPolygons(self, D: bool) -> None: ...
    @overload
    def DisplayPolygons(self) -> bool: ...
    @overload
    def DisplayTriangulation(self, D: bool) -> None: ...
    @overload
    def DisplayTriangulation(self) -> bool: ...
    def GetDisplayHLR(self) -> Tuple[bool, bool, bool, bool, float]: ...
    @staticmethod
    def LastPick(S: TopoDS_Shape) -> Tuple[float, float]: ...
    def NbIsos(self) -> int: ...
    def Shape(self) -> TopoDS_Shape: ...

class DBRep_Edge(Standard_Transient):
    @overload
    def Color(self) -> False: ...
    @overload
    def Edge(self) -> TopoDS_Edge: ...
    @overload
    def Edge(self, E: TopoDS_Edge) -> None: ...

class DBRep_Face(Standard_Transient):
    @overload
    def Color(self) -> False: ...
    @overload
    def Face(self) -> TopoDS_Face: ...
    @overload
    def Face(self, F: TopoDS_Face) -> None: ...
    def GetIso(self, I: int, T: GeomAbs_IsoType) -> Tuple[float, float, float]: ...
    def Iso(self, I: int, T: GeomAbs_IsoType, Par: float, T1: float, T2: float) -> None: ...
    def NbIsos(self) -> int: ...

class DBRep_HideData:
    def __init__(self) -> None: ...
    def Angle(self) -> float: ...
    def IsSame(self, TProj: gp_Trsf, Focla: float) -> bool: ...
    def LastPick(self) -> TopoDS_Shape: ...
    def Set(self, ViewId: int, TProj: gp_Trsf, Focal: float, S: TopoDS_Shape, ang: float) -> None: ...
    def ViewId(self) -> int: ...

class DBRep_IsoBuilder(Geom2dHatch_Hatcher):
    def __init__(self, TopologicalFace: TopoDS_Face, Infinite: float, NbIsos: int) -> None: ...
    def LoadIsos(self, Face: DBRep_Face) -> None: ...
    def NbDomains(self) -> int: ...

class DBRep_Params:
    def __init__(self) -> None: ...

# harray1 classes
# harray2 classes
# hsequence classes

dbrep_BasicCommands = dbrep.BasicCommands
dbrep_Discretisation = dbrep.Discretisation
dbrep_Get = dbrep.Get
dbrep_Get = dbrep.Get
dbrep_GetExisting = dbrep.GetExisting
dbrep_HLRAngle = dbrep.HLRAngle
dbrep_HLRMode = dbrep.HLRMode
dbrep_HidMode = dbrep.HidMode
dbrep_NbIsos = dbrep.NbIsos
dbrep_Parameters = dbrep.Parameters
dbrep_Rg1Mode = dbrep.Rg1Mode
dbrep_RgNMode = dbrep.RgNMode
dbrep_Set = dbrep.Set
DBRep_DrawableShape_LastPick = DBRep_DrawableShape.LastPick
DBRep_DrawableShape_addMeshNormals = DBRep_DrawableShape.addMeshNormals
DBRep_DrawableShape_addMeshNormals = DBRep_DrawableShape.addMeshNormals
DBRep_DrawableShape_addSurfaceNormals = DBRep_DrawableShape.addSurfaceNormals
DBRep_DrawableShape_addSurfaceNormals = DBRep_DrawableShape.addSurfaceNormals
