from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.gp import *
from OCC.Core.Graphic3d import *

IVtk_EdgeId = NewType('IVtk_EdgeId', IVtk_IdType)
IVtk_FaceId = NewType('IVtk_FaceId', IVtk_IdType)
IVtk_IdType = NewType('IVtk_IdType', vtkIdType)
#the following typedef cannot be wrapped as is
IVtk_IdTypeMap = NewType('IVtk_IdTypeMap', Any)
IVtk_PointId = NewType('IVtk_PointId', IVtk_IdType)

class IVtk_Pnt2dList:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> gp_XY: ...
    def Last(self) -> gp_XY: ...
    def Append(self, theItem: gp_XY) -> gp_XY: ...
    def Prepend(self, theItem: gp_XY) -> gp_XY: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> gp_XY: ...
    def SetValue(self, theIndex: int, theValue: gp_XY) -> None: ...

class IVtk_PointIdList:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> IVtk_PointId: ...
    def Last(self) -> IVtk_PointId: ...
    def Append(self, theItem: IVtk_PointId) -> IVtk_PointId: ...
    def Prepend(self, theItem: IVtk_PointId) -> IVtk_PointId: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> IVtk_PointId: ...
    def SetValue(self, theIndex: int, theValue: IVtk_PointId) -> None: ...

class IVtk_SelectionModeList:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> IVtk_SelectionMode: ...
    def Last(self) -> IVtk_SelectionMode: ...
    def Append(self, theItem: IVtk_SelectionMode) -> IVtk_SelectionMode: ...
    def Prepend(self, theItem: IVtk_SelectionMode) -> IVtk_SelectionMode: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> IVtk_SelectionMode: ...
    def SetValue(self, theIndex: int, theValue: IVtk_SelectionMode) -> None: ...

class IVtk_ShapeIdList:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> IVtk_IdType: ...
    def Last(self) -> IVtk_IdType: ...
    def Append(self, theItem: IVtk_IdType) -> IVtk_IdType: ...
    def Prepend(self, theItem: IVtk_IdType) -> IVtk_IdType: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> IVtk_IdType: ...
    def SetValue(self, theIndex: int, theValue: IVtk_IdType) -> None: ...

class IVtk_ShapePtrList:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class IVtk_SelectionMode(IntEnum):
    SM_None: int = ...
    SM_Shape: int = ...
    SM_Vertex: int = ...
    SM_Edge: int = ...
    SM_Wire: int = ...
    SM_Face: int = ...
    SM_Shell: int = ...
    SM_Solid: int = ...
    SM_CompSolid: int = ...
    SM_Compound: int = ...

SM_None = IVtk_SelectionMode.SM_None
SM_Shape = IVtk_SelectionMode.SM_Shape
SM_Vertex = IVtk_SelectionMode.SM_Vertex
SM_Edge = IVtk_SelectionMode.SM_Edge
SM_Wire = IVtk_SelectionMode.SM_Wire
SM_Face = IVtk_SelectionMode.SM_Face
SM_Shell = IVtk_SelectionMode.SM_Shell
SM_Solid = IVtk_SelectionMode.SM_Solid
SM_CompSolid = IVtk_SelectionMode.SM_CompSolid
SM_Compound = IVtk_SelectionMode.SM_Compound

class IVtk_MeshType(IntEnum):
    MT_Undefined: int = ...
    MT_IsoLine: int = ...
    MT_FreeVertex: int = ...
    MT_SharedVertex: int = ...
    MT_FreeEdge: int = ...
    MT_BoundaryEdge: int = ...
    MT_SharedEdge: int = ...
    MT_WireFrameFace: int = ...
    MT_ShadedFace: int = ...
    MT_SeamEdge: int = ...

MT_Undefined = IVtk_MeshType.MT_Undefined
MT_IsoLine = IVtk_MeshType.MT_IsoLine
MT_FreeVertex = IVtk_MeshType.MT_FreeVertex
MT_SharedVertex = IVtk_MeshType.MT_SharedVertex
MT_FreeEdge = IVtk_MeshType.MT_FreeEdge
MT_BoundaryEdge = IVtk_MeshType.MT_BoundaryEdge
MT_SharedEdge = IVtk_MeshType.MT_SharedEdge
MT_WireFrameFace = IVtk_MeshType.MT_WireFrameFace
MT_ShadedFace = IVtk_MeshType.MT_ShadedFace
MT_SeamEdge = IVtk_MeshType.MT_SeamEdge

class IVtk_DisplayMode(IntEnum):
    DM_Wireframe: int = ...
    DM_Shading: int = ...

DM_Wireframe = IVtk_DisplayMode.DM_Wireframe
DM_Shading = IVtk_DisplayMode.DM_Shading

class IVtk_Interface(Standard_Transient):
    pass

class IVtk_IShape(IVtk_Interface):
    def GetId(self) -> IVtk_IdType: ...
    def GetSubIds(self, theId: IVtk_IdType) -> IVtk_ShapeIdList: ...
    def SetId(self, theId: IVtk_IdType) -> None: ...

class IVtk_IShapeData(IVtk_Interface):
    @overload
    def InsertCoordinate(self, theX: float, theY: float, theZ: float) -> IVtk_PointId: ...
    @overload
    def InsertCoordinate(self, thePnt: gp_Pnt) -> IVtk_PointId: ...
    @overload
    def InsertLine(self, theShapeID: IVtk_IdType, thePointId1: IVtk_PointId, thePointId2: IVtk_PointId, theMeshType: Optional[IVtk_MeshType] = MT_Undefined) -> None: ...
    @overload
    def InsertLine(self, theShapeID: IVtk_IdType, thePointIds: IVtk_PointIdList, theMeshType: Optional[IVtk_MeshType] = MT_Undefined) -> None: ...
    def InsertPoint(self, thePnt: gp_Pnt, theNorm: float) -> IVtk_PointId: ...
    def InsertTriangle(self, theShapeID: IVtk_IdType, thePointId1: IVtk_PointId, thePointId2: IVtk_PointId, thePointId3: IVtk_PointId, theMeshType: Optional[IVtk_MeshType] = MT_Undefined) -> None: ...
    def InsertVertex(self, theShapeID: IVtk_IdType, thePointId: IVtk_PointId, theMeshType: Optional[IVtk_MeshType] = MT_Undefined) -> None: ...

class IVtk_IShapeMesher(IVtk_Interface):
    pass

class IVtk_IShapePickerAlgo(IVtk_Interface):
    def NbPicked(self) -> int: ...
    @overload
    def Pick(self, theX: float, theY: float) -> bool: ...
    @overload
    def Pick(self, theXMin: float, theYMin: float, theXMax: float, theYMax: float) -> bool: ...
    @overload
    def SetSelectionMode(self, theShapes: IVtk_ShapePtrList, theMode: IVtk_SelectionMode, theIsTurnOn: Optional[bool] = true) -> None: ...
    def ShapesPicked(self) -> IVtk_ShapeIdList: ...
    def SubShapesPicked(self, theId: IVtk_IdType, theShapeList: IVtk_ShapeIdList) -> None: ...

class IVtk_IView(IVtk_Interface):
    def DisplayToWorld(self, theDisplayPnt: gp_XY, theWorldPnt: gp_XYZ) -> bool: ...
    def GetAspectRatio(self) -> False: ...
    def GetCamera(self, theProj: Graphic3d_Mat4d, theOrient: Graphic3d_Mat4d) -> bool: ...
    def GetDistance(self) -> False: ...
    def GetParallelScale(self) -> False: ...
    def GetViewAngle(self) -> False: ...
    def GetViewport(self) -> Tuple[float, float, float, float]: ...
    def IsPerspective(self) -> bool: ...

# harray1 classes
# harray2 classes
# hsequence classes

