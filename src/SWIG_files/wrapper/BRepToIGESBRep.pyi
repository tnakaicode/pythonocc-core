from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.BRepToIGES import *
from OCC.Core.TopoDS import *
from OCC.Core.IGESData import *
from OCC.Core.Message import *
from OCC.Core.IGESSolid import *


class BRepToIGESBRep_Entity(BRepToIGES_BREntity):
    def __init__(self) -> None: ...
    def AddEdge(self, myedge: TopoDS_Edge, mycurve3d: IGESData_IGESEntity) -> int: ...
    def AddVertex(self, myvertex: TopoDS_Vertex) -> int: ...
    def Clear(self) -> None: ...
    def IndexEdge(self, myedge: TopoDS_Edge) -> int: ...
    def IndexVertex(self, myvertex: TopoDS_Vertex) -> int: ...
    def TransferCompSolid(self, start: TopoDS_CompSolid, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    def TransferCompound(self, start: TopoDS_Compound, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    @overload
    def TransferEdge(self, myedge: TopoDS_Edge) -> IGESData_IGESEntity: ...
    @overload
    def TransferEdge(self, myedge: TopoDS_Edge, myface: TopoDS_Face, length: float) -> IGESData_IGESEntity: ...
    def TransferEdgeList(self) -> None: ...
    def TransferFace(self, start: TopoDS_Face) -> IGESSolid_Face: ...
    def TransferShape(self, start: TopoDS_Shape, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    def TransferShell(self, start: TopoDS_Shell, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESSolid_Shell: ...
    def TransferSolid(self, start: TopoDS_Solid, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESSolid_ManifoldSolid: ...
    def TransferVertexList(self) -> None: ...
    def TransferWire(self, mywire: TopoDS_Wire, myface: TopoDS_Face, length: float) -> IGESSolid_Loop: ...

# harray1 classes
# harray2 classes
# hsequence classes

