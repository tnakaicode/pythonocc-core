from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TopoDS import *
from OCC.Core.IGESData import *
from OCC.Core.Transfer import *
from OCC.Core.Message import *
from OCC.Core.TopTools import *
from OCC.Core.Geom import *
from OCC.Core.TopLoc import *
from OCC.Core.gp import *


class BRepToIGES_BREntity:
    def __init__(self) -> None: ...
    @overload
    def AddFail(self, start: TopoDS_Shape, amess: str) -> None: ...
    @overload
    def AddFail(self, start: Standard_Transient, amess: str) -> None: ...
    @overload
    def AddWarning(self, start: TopoDS_Shape, amess: str) -> None: ...
    @overload
    def AddWarning(self, start: Standard_Transient, amess: str) -> None: ...
    def GetConvertSurfaceMode(self) -> bool: ...
    def GetModel(self) -> IGESData_IGESModel: ...
    def GetPCurveMode(self) -> bool: ...
    @overload
    def GetShapeResult(self, start: TopoDS_Shape) -> Standard_Transient: ...
    @overload
    def GetShapeResult(self, start: Standard_Transient) -> Standard_Transient: ...
    def GetTransferProcess(self) -> Transfer_FinderProcess: ...
    def GetUnit(self) -> float: ...
    @overload
    def HasShapeResult(self, start: TopoDS_Shape) -> bool: ...
    @overload
    def HasShapeResult(self, start: Standard_Transient) -> bool: ...
    def Init(self) -> None: ...
    def SetModel(self, model: IGESData_IGESModel) -> None: ...
    @overload
    def SetShapeResult(self, start: TopoDS_Shape, result: Standard_Transient) -> None: ...
    @overload
    def SetShapeResult(self, start: Standard_Transient, result: Standard_Transient) -> None: ...
    def SetTransferProcess(self, TP: Transfer_FinderProcess) -> None: ...
    def TransferShape(self, start: TopoDS_Shape, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...

class BRepToIGES_BRShell(BRepToIGES_BREntity):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, BR: BRepToIGES_BREntity) -> None: ...
    def TransferFace(self, start: TopoDS_Face, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    @overload
    def TransferShell(self, start: TopoDS_Shape, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    @overload
    def TransferShell(self, start: TopoDS_Shell, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...

class BRepToIGES_BRSolid(BRepToIGES_BREntity):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, BR: BRepToIGES_BREntity) -> None: ...
    def TransferCompSolid(self, start: TopoDS_CompSolid, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    def TransferCompound(self, start: TopoDS_Compound, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    @overload
    def TransferSolid(self, start: TopoDS_Shape, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...
    @overload
    def TransferSolid(self, start: TopoDS_Solid, theProgress: Optional[Message_ProgressRange] = Message_ProgressRange()) -> IGESData_IGESEntity: ...

class BRepToIGES_BRWire(BRepToIGES_BREntity):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, BR: BRepToIGES_BREntity) -> None: ...
    @overload
    def TransferEdge(self, theEdge: TopoDS_Edge, theOriginMap: TopTools_DataMapOfShapeShape, theIsBRepMode: bool) -> IGESData_IGESEntity: ...
    @overload
    def TransferEdge(self, theEdge: TopoDS_Edge, theFace: TopoDS_Face, theOriginMap: TopTools_DataMapOfShapeShape, theLength: float, theIsBRepMode: bool) -> IGESData_IGESEntity: ...
    @overload
    def TransferVertex(self, myvertex: TopoDS_Vertex) -> IGESData_IGESEntity: ...
    @overload
    def TransferVertex(self, myvertex: TopoDS_Vertex, myedge: TopoDS_Edge) -> Tuple[IGESData_IGESEntity, float]: ...
    @overload
    def TransferVertex(self, myvertex: TopoDS_Vertex, myedge: TopoDS_Edge, myface: TopoDS_Face) -> Tuple[IGESData_IGESEntity, float]: ...
    @overload
    def TransferVertex(self, myvertex: TopoDS_Vertex, myedge: TopoDS_Edge, mysurface: Geom_Surface, myloc: TopLoc_Location) -> Tuple[IGESData_IGESEntity, float]: ...
    @overload
    def TransferVertex(self, myvertex: TopoDS_Vertex, myface: TopoDS_Face, mypoint: gp_Pnt2d) -> IGESData_IGESEntity: ...
    @overload
    def TransferWire(self, start: TopoDS_Shape) -> IGESData_IGESEntity: ...
    @overload
    def TransferWire(self, mywire: TopoDS_Wire) -> IGESData_IGESEntity: ...
    @overload
    def TransferWire(self, theWire: TopoDS_Wire, theFace: TopoDS_Face, theOriginMap: TopTools_DataMapOfShapeShape, theCurve2d: IGESData_IGESEntity, theLength: float) -> IGESData_IGESEntity: ...

# harray1 classes
# harray2 classes
# hsequence classes

