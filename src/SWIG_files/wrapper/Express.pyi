from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TCollection import *
from OCC.Core.TColStd import *

Express_Array = NewType('Express_Array', Express_ComplexType)
Express_Bag = NewType('Express_Bag', Express_ComplexType)
Express_List = NewType('Express_List', Express_ComplexType)
Express_Number = NewType('Express_Number', Express_Integer)
Express_Set = NewType('Express_Set', Express_ComplexType)

class Express_SequenceOfEntity:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Length(self) -> int: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class Express_SequenceOfField:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Length(self) -> int: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class Express_SequenceOfItem:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Length(self) -> int: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class express:
    @staticmethod
    def EnumPrefix(theName: str) -> str: ...
    @staticmethod
    def Schema() -> Express_Schema: ...
    @staticmethod
    def ToStepName(theName: str) -> str: ...

class Express_Field(Standard_Transient):
    @overload
    def __init__(self, theName: str, theType: Express_Type, theOpt: bool) -> None: ...
    @overload
    def __init__(self, theName: TCollection_HAsciiString, theType: Express_Type, theOpt: bool) -> None: ...
    def HName(self) -> TCollection_HAsciiString: ...
    def IsOptional(self) -> bool: ...
    def Name(self) -> str: ...
    def Type(self) -> Express_Type: ...

class Express_Item(Standard_Transient):
    def CPPName(self) -> str: ...
    def Category(self) -> str: ...
    def CheckFlag(self) -> bool: ...
    def FillSharedFlag(self) -> bool: ...
    def Generate(self) -> bool: ...
    def GenerateClass(self) -> bool: ...
    def GetGenMode(self) -> False: ...
    def GetPackageName(self) -> str: ...
    @staticmethod
    def GetUnknownPackageName() -> str: ...
    def HName(self) -> TCollection_HAsciiString: ...
    @staticmethod
    def Index() -> int: ...
    def IsPackageNameSet(self) -> bool: ...
    def Name(self) -> str: ...
    def PropagateUse(self) -> None: ...
    def ResetLoopFlag(self) -> None: ...
    def SetCategory(self, theCateg: TCollection_HAsciiString) -> None: ...
    def SetCheckFlag(self, theCheckFlag: bool) -> None: ...
    def SetFillSharedFlag(self, theFillSharedFlag: bool) -> None: ...
    @staticmethod
    def SetIndex(theIndex: int) -> None: ...
    def SetPackageName(self, thePack: str) -> None: ...
    def SetShortName(self, theShName: TCollection_HAsciiString) -> None: ...
    def ShortName(self) -> TCollection_HAsciiString: ...
    def Use(self) -> bool: ...
    def Use2(self, theRefName: str, theRefPack: str) -> None: ...

class Express_Schema(Standard_Transient):
    @overload
    def __init__(self, theName: str, theItems: Express_HSequenceOfItem) -> None: ...
    @overload
    def __init__(self, theName: TCollection_HAsciiString, theItems: Express_HSequenceOfItem) -> None: ...
    @overload
    def Item(self, theNum: int) -> Express_Item: ...
    @overload
    def Item(self, theName: str, theSilent: Optional[bool] = False) -> Express_Item: ...
    @overload
    def Item(self, theName: str) -> Express_Item: ...
    @overload
    def Item(self, theName: TCollection_HAsciiString) -> Express_Item: ...
    def Items(self) -> Express_HSequenceOfItem: ...
    def Name(self) -> TCollection_HAsciiString: ...
    def NbItems(self) -> int: ...

class Express_Type(Standard_Transient):
    def CPPName(self) -> str: ...
    def IsHandle(self) -> bool: ...
    def IsSimple(self) -> bool: ...
    def IsStandard(self) -> bool: ...
    def Use(self) -> bool: ...
    def Use2(self, theRefName: str, theRefPack: str) -> None: ...

class Express_Alias(Express_Item):
    def __init__(self, theName: str, theType: Express_Type) -> None: ...
    def CPPName(self) -> str: ...
    def GenerateClass(self) -> bool: ...
    def PropagateUse(self) -> None: ...
    def Type(self) -> Express_Type: ...

class Express_ComplexType(Express_Type):
    def __init__(self, theImin: int, theImax: int, theType: Express_Type) -> None: ...
    def CPPName(self) -> str: ...
    def Type(self) -> Express_Type: ...
    def Use(self) -> bool: ...
    def Use2(self, theRefName: str, theRefPack: str) -> None: ...

class Express_Entity(Express_Item):
    def __init__(self, theName: str, theInherit: TColStd_HSequenceOfHAsciiString, theFields: Express_HSequenceOfField) -> None: ...
    def AbstractFlag(self) -> bool: ...
    def Fields(self) -> Express_HSequenceOfField: ...
    def Inherit(self) -> Express_HSequenceOfEntity: ...
    def NbFields(self, theInherited: Optional[bool] = False) -> int: ...
    def SetAbstractFlag(self, theIsAbstract: bool) -> None: ...
    def SuperTypes(self) -> TColStd_HSequenceOfHAsciiString: ...

class Express_Enum(Express_Item):
    def __init__(self, theName: str, theNames: TColStd_HSequenceOfHAsciiString) -> None: ...
    def GenerateClass(self) -> bool: ...
    def Names(self) -> TColStd_HSequenceOfHAsciiString: ...
    def PropagateUse(self) -> None: ...

class Express_NamedType(Express_Type):
    @overload
    def __init__(self, theName: str) -> None: ...
    @overload
    def __init__(self, theName: TCollection_HAsciiString) -> None: ...
    def CPPName(self) -> str: ...
    def HName(self) -> TCollection_HAsciiString: ...
    def IsHandle(self) -> bool: ...
    def IsSimple(self) -> bool: ...
    def IsStandard(self) -> bool: ...
    def Item(self) -> Express_Item: ...
    def Name(self) -> str: ...
    def SetItem(self, theItem: Express_Item) -> None: ...
    def Use(self) -> bool: ...
    def Use2(self, theRefName: str, theRefPack: str) -> None: ...

class Express_PredefinedType(Express_Type):
    def IsStandard(self) -> bool: ...

class Express_Reference(Express_Item):
    def __init__(self, theName: str, theTypes: TColStd_HSequenceOfHAsciiString) -> None: ...
    def GenerateClass(self) -> bool: ...
    def Items(self) -> Express_HSequenceOfItem: ...
    def PropagateUse(self) -> None: ...
    def Types(self) -> TColStd_HSequenceOfHAsciiString: ...

class Express_Select(Express_Item):
    def __init__(self, theName: str, theNames: TColStd_HSequenceOfHAsciiString) -> None: ...
    def GenerateClass(self) -> bool: ...
    def Items(self) -> Express_HSequenceOfItem: ...
    def Names(self) -> TColStd_HSequenceOfHAsciiString: ...
    def PropagateUse(self) -> None: ...

class Express_Boolean(Express_PredefinedType):
    def __init__(self) -> None: ...
    def CPPName(self) -> str: ...

class Express_Integer(Express_PredefinedType):
    def __init__(self) -> None: ...
    def CPPName(self) -> str: ...

class Express_Logical(Express_PredefinedType):
    def __init__(self) -> None: ...
    def CPPName(self) -> str: ...
    def IsHandle(self) -> bool: ...
    def IsSimple(self) -> bool: ...
    def IsStandard(self) -> bool: ...

class Express_Real(Express_PredefinedType):
    def __init__(self) -> None: ...
    def CPPName(self) -> str: ...

class Express_String(Express_PredefinedType):
    def __init__(self) -> None: ...
    def CPPName(self) -> str: ...
    def IsStandard(self) -> bool: ...

# harray1 classes
# harray2 classes
# hsequence classes

class Express_HSequenceOfEntity(Express_SequenceOfEntity, Standard_Transient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Express_SequenceOfEntity) -> None: ...
    def Sequence(self) -> Express_SequenceOfEntity: ...
    def Append(self, theSequence: Express_SequenceOfEntity) -> None: ...


class Express_HSequenceOfField(Express_SequenceOfField, Standard_Transient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Express_SequenceOfField) -> None: ...
    def Sequence(self) -> Express_SequenceOfField: ...
    def Append(self, theSequence: Express_SequenceOfField) -> None: ...


class Express_HSequenceOfItem(Express_SequenceOfItem, Standard_Transient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Express_SequenceOfItem) -> None: ...
    def Sequence(self) -> Express_SequenceOfItem: ...
    def Append(self, theSequence: Express_SequenceOfItem) -> None: ...


express_EnumPrefix = express.EnumPrefix
express_Schema = express.Schema
express_ToStepName = express.ToStepName
express_WriteMethodStamp = express.WriteMethodStamp
Express_Item_GetUnknownPackageName = Express_Item.GetUnknownPackageName
Express_Item_Index = Express_Item.Index
Express_Item_SetIndex = Express_Item.SetIndex
