from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TCollection import *
from OCC.Core.Quantity import *
from OCC.Core.gp import *
from OCC.Core.Message import *
from OCC.Core.Bnd import *
from OCC.Core.OSD import *
from OCC.Core.Aspect import *

#the following typedef cannot be wrapped as is
Draw_MapOfAsciiString = NewType('Draw_MapOfAsciiString', Any)
Draw_PInterp = NewType('Draw_PInterp', Tcl_Interp)
Drawable = NewType('Drawable', int)
Pixmap = NewType('Pixmap', int)
Window = NewType('Window', int)

class Draw_SequenceOfDrawable3D:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def First(self) -> False: ...
    def Last(self) -> False: ...
    def Length(self) -> int: ...
    def Append(self, theItem: False) -> False: ...
    def Prepend(self, theItem: False) -> False: ...
    def RemoveFirst(self) -> None: ...
    def Reverse(self) -> None: ...
    def Value(self, theIndex: int) -> False: ...
    def SetValue(self, theIndex: int, theValue: False) -> None: ...

class Draw_ColorKind(IntEnum):
    Draw_blanc: int = ...
    Draw_rouge: int = ...
    Draw_vert: int = ...
    Draw_bleu: int = ...
    Draw_cyan: int = ...
    Draw_or: int = ...
    Draw_magenta: int = ...
    Draw_marron: int = ...
    Draw_orange: int = ...
    Draw_rose: int = ...
    Draw_saumon: int = ...
    Draw_violet: int = ...
    Draw_jaune: int = ...
    Draw_kaki: int = ...
    Draw_corail: int = ...

Draw_blanc = Draw_ColorKind.Draw_blanc
Draw_rouge = Draw_ColorKind.Draw_rouge
Draw_vert = Draw_ColorKind.Draw_vert
Draw_bleu = Draw_ColorKind.Draw_bleu
Draw_cyan = Draw_ColorKind.Draw_cyan
Draw_or = Draw_ColorKind.Draw_or
Draw_magenta = Draw_ColorKind.Draw_magenta
Draw_marron = Draw_ColorKind.Draw_marron
Draw_orange = Draw_ColorKind.Draw_orange
Draw_rose = Draw_ColorKind.Draw_rose
Draw_saumon = Draw_ColorKind.Draw_saumon
Draw_violet = Draw_ColorKind.Draw_violet
Draw_jaune = Draw_ColorKind.Draw_jaune
Draw_kaki = Draw_ColorKind.Draw_kaki
Draw_corail = Draw_ColorKind.Draw_corail

class Draw_MarkerShape(IntEnum):
    Draw_Square: int = ...
    Draw_Losange: int = ...
    Draw_X: int = ...
    Draw_Plus: int = ...
    Draw_Circle: int = ...
    Draw_CircleZoom: int = ...

Draw_Square = Draw_MarkerShape.Draw_Square
Draw_Losange = Draw_MarkerShape.Draw_Losange
Draw_X = Draw_MarkerShape.Draw_X
Draw_Plus = Draw_MarkerShape.Draw_Plus
Draw_Circle = Draw_MarkerShape.Draw_Circle
Draw_CircleZoom = Draw_MarkerShape.Draw_CircleZoom

class console_semaphore_value(IntEnum):
    STOP_CONSOLE: int = ...
    WAIT_CONSOLE_COMMAND: int = ...
    HAS_CONSOLE_COMMAND: int = ...

STOP_CONSOLE = console_semaphore_value.STOP_CONSOLE
WAIT_CONSOLE_COMMAND = console_semaphore_value.WAIT_CONSOLE_COMMAND
HAS_CONSOLE_COMMAND = console_semaphore_value.HAS_CONSOLE_COMMAND

class draw:
    @staticmethod
    def Atof(Name: str) -> float: ...
    @staticmethod
    def Atoi(Name: str) -> int: ...
    @staticmethod
    def BasicCommands(I: Draw_Interpretor) -> None: ...
    @staticmethod
    def Commands(I: Draw_Interpretor) -> None: ...
    @staticmethod
    def Drawables() -> False: ...
    @overload
    @staticmethod
    def Get(theName: str) -> Draw_Drawable3D: ...
    @overload
    @staticmethod
    def Get(Name: str) -> Tuple[bool, float]: ...
    @staticmethod
    def GetExisting(theName: str) -> Draw_Drawable3D: ...
    @staticmethod
    def GetInterpretor() -> Draw_Interpretor: ...
    @staticmethod
    def GetProgressBar() -> Draw_ProgressIndicator: ...
    @staticmethod
    def GraphicCommands(I: Draw_Interpretor) -> None: ...
    @staticmethod
    def LastPick() -> Tuple[int, int, int, int]: ...
    @staticmethod
    def Load(theDI: Draw_Interpretor, theKey: str, theResourceFileName: str, theDefaultsDirectory: str, theUserDefaultsDirectory: str, theIsVerbose: Optional[bool] = False) -> None: ...
    @staticmethod
    def MessageCommands(I: Draw_Interpretor) -> None: ...
    @overload
    @staticmethod
    def ParseColor(theArgNb: int, theArgVec: str, theColor: Quantity_ColorRGBA) -> int: ...
    @overload
    @staticmethod
    def ParseColor(theArgNb: int, theArgVec: str, theColor: Quantity_Color) -> int: ...
    @staticmethod
    def ParseInteger(theExpressionString: str) -> Tuple[bool, int]: ...
    @staticmethod
    def ParseOnOff(theArg: str) -> Tuple[bool, bool]: ...
    @staticmethod
    def ParseOnOffIterator(theArgsNb: int, theArgVec: str) -> Tuple[bool, int]: ...
    @staticmethod
    def ParseOnOffNoIterator(theArgsNb: int, theArgVec: str) -> Tuple[bool, int]: ...
    @staticmethod
    def ParseReal(theExpressionString: str) -> Tuple[bool, float]: ...
    @staticmethod
    def PloadCommands(I: Draw_Interpretor) -> None: ...
    @staticmethod
    def Repaint() -> None: ...
    @overload
    @staticmethod
    def Set(Name: str, D: Draw_Drawable3D, Disp: bool) -> None: ...
    @overload
    @staticmethod
    def Set(Name: str, D: Draw_Drawable3D) -> None: ...
    @overload
    @staticmethod
    def Set(Name: str, val: float) -> None: ...
    @overload
    @staticmethod
    def Set(Name: str, val: str) -> None: ...
    @staticmethod
    def SetProgressBar(theProgress: Draw_ProgressIndicator) -> None: ...
    @staticmethod
    def UnitCommands(I: Draw_Interpretor) -> None: ...
    @staticmethod
    def VariableCommands(I: Draw_Interpretor) -> None: ...

class Draw_Color:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, c: Draw_ColorKind) -> None: ...
    def ID(self) -> Draw_ColorKind: ...

class Draw_Display:
    def __init__(self) -> None: ...
    @overload
    def Draw(self, p1: gp_Pnt, p2: gp_Pnt) -> None: ...
    @overload
    def Draw(self, p1: gp_Pnt2d, p2: gp_Pnt2d) -> None: ...
    @overload
    def Draw(self, C: gp_Circ, A1: float, A2: float, ModifyWithZoom: Optional[bool] = True) -> None: ...
    @overload
    def Draw(self, C: gp_Circ2d, A1: float, A2: float, ModifyWithZoom: Optional[bool] = True) -> None: ...
    @overload
    def DrawMarker(self, pt: gp_Pnt, S: Draw_MarkerShape, Size: Optional[int] = 5) -> None: ...
    @overload
    def DrawMarker(self, pt: gp_Pnt2d, S: Draw_MarkerShape, Size: Optional[int] = 5) -> None: ...
    @overload
    def DrawMarker(self, pt: gp_Pnt, S: Draw_MarkerShape, Size: float) -> None: ...
    @overload
    def DrawMarker(self, pt: gp_Pnt2d, S: Draw_MarkerShape, Size: float) -> None: ...
    @overload
    def DrawString(self, pt: gp_Pnt, S: str) -> None: ...
    @overload
    def DrawString(self, pt: gp_Pnt2d, S: str) -> None: ...
    @overload
    def DrawString(self, pt: gp_Pnt, S: str, moveX: float, moveY: float) -> None: ...
    @overload
    def DrawString(self, pt: gp_Pnt2d, S: str, moveX: float, moveY: float) -> None: ...
    @overload
    def DrawTo(self, pt: gp_Pnt) -> None: ...
    @overload
    def DrawTo(self, pt: gp_Pnt2d) -> None: ...
    def Flush(self) -> None: ...
    def HasPicked(self) -> bool: ...
    @overload
    def MoveTo(self, pt: gp_Pnt) -> None: ...
    @overload
    def MoveTo(self, pt: gp_Pnt2d) -> None: ...
    @overload
    def Project(self, pt: gp_Pnt) -> gp_Pnt2d: ...
    @overload
    def Project(self, pt: gp_Pnt, pt2d: gp_Pnt2d) -> None: ...
    def SetColor(self, col: Draw_Color) -> None: ...
    def SetMode(self, M: int) -> None: ...
    def ViewId(self) -> int: ...
    def Zoom(self) -> float: ...

class Draw_Drawable3D(Standard_Transient):
    def Bounds(self) -> Tuple[float, float, float, float]: ...
    def Copy(self) -> Draw_Drawable3D: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def Is3D(self) -> bool: ...
    def IsDisplayable(self) -> bool: ...
    @overload
    def Name(self) -> str: ...
    @overload
    def Name(self, N: str) -> None: ...
    def PickReject(self, X: float, Y: float, Prec: float) -> bool: ...
    @overload
    def Protected(self) -> bool: ...
    @overload
    def Protected(self, P: bool) -> None: ...
    def SetBounds(self, theXMin: float, theXMax: float, theYMin: float, theYMax: float) -> None: ...
    @overload
    def Visible(self) -> bool: ...
    @overload
    def Visible(self, V: bool) -> None: ...
    def Whatis(self, I: Draw_Interpretor) -> None: ...

class Draw_Interpretor:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, theInterp: Draw_PInterp) -> None: ...
    def AddLog(self, theStr: str) -> None: ...
    @overload
    def Append(self, theResult: str) -> Draw_Interpretor: ...
    @overload
    def Append(self, theResult: str) -> Draw_Interpretor: ...
    @overload
    def Append(self, theResult: str) -> Draw_Interpretor: ...
    @overload
    def Append(self, theResult: int) -> Draw_Interpretor: ...
    @overload
    def Append(self, theResult: float) -> Draw_Interpretor: ...
    @overload
    def Append(self, theResult: Standard_SStream) -> Draw_Interpretor: ...
    def AppendElement(self, theResult: str) -> None: ...
    @staticmethod
    def Complete(theScript: str) -> bool: ...
    def Eval(self, theScript: str) -> int: ...
    def EvalFile(self, theFileName: str) -> int: ...
    def GetDoEcho(self) -> bool: ...
    def GetDoLog(self) -> bool: ...
    def GetLog(self) -> str: ...
    def GetLogFileDescriptor(self) -> int: ...
    def Init(self) -> None: ...
    def Interp(self) -> Draw_PInterp: ...
    def PrintHelp(self, theCommandName: str) -> int: ...
    def RecordAndEval(self, theScript: str, theFlags: Optional[int] = 0) -> int: ...
    def Remove(self, theCommandName: str) -> bool: ...
    def Reset(self) -> None: ...
    def ResetLog(self) -> None: ...
    def Result(self) -> str: ...
    def Set(self, theInterp: Draw_PInterp) -> None: ...
    def SetDoEcho(self, theDoEcho: bool) -> None: ...
    def SetDoLog(self, theDoLog: bool) -> None: ...
    def SetToColorize(self, theToColorize: bool) -> None: ...
    def ToColorize(self) -> bool: ...

class Draw_Printer(Message_Printer):
    def __init__(self, theTcl: Draw_Interpretor) -> None: ...

class Draw_ProgressIndicator(Message_ProgressIndicator):
    def __init__(self, di: Draw_Interpretor, theUpdateThreshold: Optional[float] = 1) -> None: ...
    @staticmethod
    def DefaultConsoleMode() -> bool: ...
    @staticmethod
    def DefaultGraphMode() -> bool: ...
    @staticmethod
    def DefaultTclMode() -> bool: ...
    def GetConsoleMode(self) -> bool: ...
    def GetGraphMode(self) -> bool: ...
    def GetTclMode(self) -> bool: ...
    def Reset(self) -> None: ...
    def SetConsoleMode(self, theMode: bool) -> None: ...
    def SetGraphMode(self, theGraphMode: bool) -> None: ...
    def SetTclMode(self, theTclMode: bool) -> None: ...
    def Show(self, theScope: Message_ProgressScope, force: Optional[bool] = True) -> None: ...
    @staticmethod
    def StopIndicator() -> None: ...
    def UserBreak(self) -> bool: ...

class Draw_Viewer:
    def __init__(self) -> None: ...
    def AddDrawable(self, D: Draw_Drawable3D) -> None: ...
    def Clear(self) -> None: ...
    def Clear2D(self) -> None: ...
    def Clear3D(self) -> None: ...
    def ClearView(self, id: int) -> None: ...
    def ConfigView(self, id: int) -> None: ...
    def DefineColor(self, i: int, colname: str) -> bool: ...
    def DeleteView(self, id: int) -> None: ...
    def DisplayView(self, id: int) -> None: ...
    def DrawOnView(self, id: int, D: Draw_Drawable3D) -> None: ...
    def FitView(self, id: int, frame: int) -> None: ...
    def Flush(self) -> None: ...
    def Focal(self, id: int) -> float: ...
    def GetDrawables(self) -> Draw_SequenceOfDrawable3D: ...
    def GetFrame(self, id: int) -> Tuple[int, int, int, int]: ...
    def GetPan(self, id: int) -> Tuple[int, int]: ...
    def GetPosSize(self, id: int) -> Tuple[int, int, int, int]: ...
    def GetTrsf(self, id: int, T: gp_Trsf) -> None: ...
    def GetType(self, id: int) -> str: ...
    def HasView(self, id: int) -> bool: ...
    def HideView(self, id: int) -> None: ...
    def HighlightOnView(self, id: int, D: Draw_Drawable3D, C: Optional[Draw_ColorKind] = Draw_blanc) -> None: ...
    def Is3D(self, id: int) -> bool: ...
    def LastPick(self, P1: gp_Pnt, P2: gp_Pnt) -> float: ...
    def MakeDisplay(self, id: int) -> Draw_Display: ...
    @overload
    def MakeView(self, id: int, typ: str, X: int, Y: int, W: int, H: int) -> None: ...
    @overload
    def MakeView(self, id: int, typ: str, window: str) -> None: ...
    def PanView(self, id: int, DX: int, DY: int) -> None: ...
    def Pick(self, id: int, X: int, Y: int, Prec: int, D: Draw_Drawable3D, First: Optional[int] = 0) -> int: ...
    def PostColor(self, icol: int, width: int, gray: float) -> None: ...
    def RemoveDrawable(self, D: Draw_Drawable3D) -> None: ...
    def RemoveView(self, id: int) -> None: ...
    def Repaint2D(self) -> None: ...
    def Repaint3D(self) -> None: ...
    def RepaintAll(self) -> None: ...
    def RepaintView(self, id: int) -> None: ...
    def ResetView(self, id: int) -> None: ...
    def ResizeView(self, id: int) -> None: ...
    def SaveView(self, id: int, filename: str) -> bool: ...
    def Select(self, waitclick: Optional[bool] = True) -> Tuple[int, int, int, int]: ...
    def SetFocal(self, id: int, FocalDist: float) -> None: ...
    def SetPan(self, id: int, DX: int, DY: int) -> None: ...
    def SetTitle(self, id: int, name: str) -> None: ...
    def SetTrsf(self, id: int, T: gp_Trsf) -> None: ...
    def SetZoom(self, id: int, z: float) -> None: ...
    def UpdateView(self, id: int, forced: Optional[bool] = False) -> None: ...
    def Zoom(self, id: int) -> float: ...

class Draw_XSegment:
    def Init(self, theXStart: int, theYStart: int, theXEnd: int, theYEnd: int) -> None: ...

class Draw_Axis3D(Draw_Drawable3D):
    @overload
    def __init__(self, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, p: gp_Pnt, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, A: gp_Ax3, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...

class Draw_Box(Draw_Drawable3D):
    def __init__(self, theOBB: Bnd_OBB, theColor: Draw_Color) -> None: ...
    def DrawOn(self, theDis: Draw_Display) -> None: ...

class Draw_Chronometer(Draw_Drawable3D):
    def __init__(self) -> None: ...
    def Copy(self) -> Draw_Drawable3D: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def Timer(self) -> OSD_Timer: ...
    def Whatis(self, I: Draw_Interpretor) -> None: ...

class Draw_Circle3D(Draw_Drawable3D):
    def __init__(self, C: gp_Circ, A1: float, A2: float, col: Draw_Color) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...

class Draw_Drawable2D(Draw_Drawable3D):
    def Is3D(self) -> bool: ...

class Draw_Grid(Draw_Drawable3D):
    def __init__(self) -> None: ...
    def DrawOn(self, Out: Draw_Display) -> None: ...
    def IsActive(self) -> bool: ...
    def StepX(self) -> float: ...
    def StepY(self) -> float: ...
    def StepZ(self) -> float: ...
    def Steps(self, StepX: float, StepY: float, StepZ: float) -> None: ...

class Draw_Marker3D(Draw_Drawable3D):
    @overload
    def __init__(self, P: gp_Pnt, T: Draw_MarkerShape, C: Draw_Color, ISize: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, P: gp_Pnt, T: Draw_MarkerShape, C: Draw_Color, RSize: float) -> None: ...
    def ChangePos(self) -> gp_Pnt: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def PickReject(self, X: float, Y: float, Prec: float) -> bool: ...

class Draw_Number(Draw_Drawable3D):
    def __init__(self, theV: float) -> None: ...
    def Copy(self) -> Draw_Drawable3D: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def IsDisplayable(self) -> bool: ...
    @overload
    def Value(self) -> float: ...
    @overload
    def Value(self, theV: float) -> None: ...
    def Whatis(self, I: Draw_Interpretor) -> None: ...

class Draw_Segment3D(Draw_Drawable3D):
    def __init__(self, p1: gp_Pnt, p2: gp_Pnt, col: Draw_Color) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    @overload
    def First(self) -> gp_Pnt: ...
    @overload
    def First(self, P: gp_Pnt) -> None: ...
    @overload
    def Last(self) -> gp_Pnt: ...
    @overload
    def Last(self, P: gp_Pnt) -> None: ...

class Draw_Text3D(Draw_Drawable3D):
    @overload
    def __init__(self, p: gp_Pnt, T: str, col: Draw_Color) -> None: ...
    @overload
    def __init__(self, p: gp_Pnt, T: str, col: Draw_Color, moveX: float, moveY: float) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def SetPnt(self, p: gp_Pnt) -> None: ...

class Draw_View(Draw_Window):
    @overload
    def __init__(self, theId: int, theViewer: Draw_Viewer, theX: int, theY: int, theWidth: int, theHeight: int, theWindow: Optional[Aspect_Drawable] = 0) -> None: ...
    @overload
    def __init__(self, theId: int, theViewer: Draw_Viewer, theTitle: str) -> None: ...
    def GetDx(self) -> int: ...
    def GetDy(self) -> int: ...
    def GetFocalDistance(self) -> float: ...
    def GetFrame(self) -> Tuple[int, int, int, int]: ...
    def GetMatrix(self) -> gp_Trsf: ...
    def GetZoom(self) -> float: ...
    def Init(self, theType: str) -> bool: ...
    def Is2D(self) -> bool: ...
    def IsPerspective(self) -> float: ...
    def ResetFrame(self) -> None: ...
    def SetDx(self, theDx: int) -> None: ...
    def SetDy(self, theDy: int) -> None: ...
    def SetFocalDistance(self, theDistance: float) -> None: ...
    def SetMatrix(self, theMatrix: gp_Trsf) -> None: ...
    def SetZoom(self, theZoom: float) -> None: ...
    def Transform(self, theTransformation: gp_Trsf) -> None: ...
    def Type(self) -> str: ...
    def WExpose(self) -> None: ...

class Draw_Axis2D(Draw_Drawable2D):
    @overload
    def __init__(self, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, p: gp_Pnt2d, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, A: gp_Ax22d, col: Draw_Color, Size: Optional[int] = 5) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...

class Draw_Circle2D(Draw_Drawable2D):
    def __init__(self, C: gp_Circ2d, A1: float, A2: float, col: Draw_Color) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...

class Draw_Marker2D(Draw_Drawable2D):
    @overload
    def __init__(self, P: gp_Pnt2d, T: Draw_MarkerShape, C: Draw_Color, Size: Optional[int] = 5) -> None: ...
    @overload
    def __init__(self, P: gp_Pnt2d, T: Draw_MarkerShape, C: Draw_Color, RSize: float) -> None: ...
    def ChangePos(self) -> gp_Pnt2d: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def PickReject(self, X: float, Y: float, Prec: float) -> bool: ...

class Draw_Segment2D(Draw_Drawable2D):
    def __init__(self, p1: gp_Pnt2d, p2: gp_Pnt2d, col: Draw_Color) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    @overload
    def First(self) -> gp_Pnt2d: ...
    @overload
    def First(self, P: gp_Pnt2d) -> None: ...
    @overload
    def Last(self) -> gp_Pnt2d: ...
    @overload
    def Last(self, P: gp_Pnt2d) -> None: ...
    def Whatis(self, I: Draw_Interpretor) -> None: ...

class Draw_Text2D(Draw_Drawable2D):
    @overload
    def __init__(self, p: gp_Pnt2d, T: str, col: Draw_Color) -> None: ...
    @overload
    def __init__(self, p: gp_Pnt2d, T: str, col: Draw_Color, moveX: int, moveY: int) -> None: ...
    def DrawOn(self, dis: Draw_Display) -> None: ...
    def SetPnt2d(self, p: gp_Pnt2d) -> None: ...

#classnotwrapped
class Draw_Window: ...

# harray1 classes
# harray2 classes
# hsequence classes

draw_Atof = draw.Atof
draw_Atoi = draw.Atoi
draw_BasicCommands = draw.BasicCommands
draw_Commands = draw.Commands
draw_Drawables = draw.Drawables
draw_Get = draw.Get
draw_Get = draw.Get
draw_GetExisting = draw.GetExisting
draw_GetInterpretor = draw.GetInterpretor
draw_GetProgressBar = draw.GetProgressBar
draw_GraphicCommands = draw.GraphicCommands
draw_LastPick = draw.LastPick
draw_Load = draw.Load
draw_MessageCommands = draw.MessageCommands
draw_ParseColor = draw.ParseColor
draw_ParseColor = draw.ParseColor
draw_ParseInteger = draw.ParseInteger
draw_ParseOnOff = draw.ParseOnOff
draw_ParseOnOffIterator = draw.ParseOnOffIterator
draw_ParseOnOffNoIterator = draw.ParseOnOffNoIterator
draw_ParseReal = draw.ParseReal
draw_PloadCommands = draw.PloadCommands
draw_Repaint = draw.Repaint
draw_Set = draw.Set
draw_Set = draw.Set
draw_Set = draw.Set
draw_Set = draw.Set
draw_SetProgressBar = draw.SetProgressBar
draw_UnitCommands = draw.UnitCommands
draw_VariableCommands = draw.VariableCommands
Draw_Drawable3D_RegisterFactory = Draw_Drawable3D.RegisterFactory
Draw_Drawable3D_Restore = Draw_Drawable3D.Restore
Draw_Interpretor_Complete = Draw_Interpretor.Complete
Draw_ProgressIndicator_DefaultConsoleMode = Draw_ProgressIndicator.DefaultConsoleMode
Draw_ProgressIndicator_DefaultGraphMode = Draw_ProgressIndicator.DefaultGraphMode
Draw_ProgressIndicator_DefaultTclMode = Draw_ProgressIndicator.DefaultTclMode
Draw_ProgressIndicator_StopIndicator = Draw_ProgressIndicator.StopIndicator
